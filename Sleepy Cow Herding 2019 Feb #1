//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"

const ll MAXN = 1e3 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll lcm(ll a, ll b) {
    ll prod = a*b;
    return (prod/__gcd(a, b));
}
 
ll ceil(ll a, ll b) {
    if (a == ZER) return a;
    return (a - ONE)/b + ONE;
}

ll floor(ll a, ll b) {
    return a/b;
}
 
ll fact[MAXN];
void precompute()
{
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = (i * fact[i - 1]) % MOD;
    }
}
 
ll powmod(ll a, ll b) {
    a %= MOD;
    if (a == ZER) return a;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
    
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

ll inv(ll a) {
    return powmod(a, MOD - 2);
}
 
ll nCk(ll n, ll k) {
    return ((fact[n] * inv(fact[k]) % MOD) * inv(fact[n-k])) % MOD;
}


void solve() {
    
    ifstream fin("herding.in");
    ofstream fout("herding.out");
    
    ll n;
    fin >> n;
    
    ll a[n];
    for (ll i = 0; i < n; i++) {
        fin >> a[i];
    }
    
    sort(a, a+n);
    
    pair<ll, ll> ans = {INF, INF};
    
    ll total = 0;
    for (ll i = 1; i < n; i++) {
        total += (a[i] - a[i-1] - 1);
    }
    
    pair<ll, ll> dist = {a[n-1] - a[n-2] - 1, a[1] - a[0] - 1};
    
    ans.second = max(total - dist.first, total - dist.second);

    
    ll l = 0, r = 0;
    while (l < n && r < n) {
        ll dist = a[r] - a[l] + 1;
        if (dist <= n) {
            if (dist != n-1) {
                ans.first = min(ans.first, n - (r - l + 1));
            }
            r++;
        } else {
            l++;
        }
    }
    
    fout << ans.first << endl;
    fout << ans.second << endl;
    
    
    return;
}

int main()
{
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    ll t = 1;
    //cin >> t;
    
    while (t--) {
        solve();
    }
}
